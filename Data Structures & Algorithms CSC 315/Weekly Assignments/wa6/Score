*  Disjoint set implementation
*  Disjoint set path compression
-  Perfect Maze creation
   Code is readable and consistently formated

Possible deductions if present
*  Memory leaks
*  Code Crashes or hangs
*  No internal documentation
   Unnecessary / unwanted files in repo (binary, editor backup, etc.)
--------------------------------------------------------------------------------
Total:   10/15

Notes:
 
   * The maze generator will return false if a random edge cannot be removed
     but there are many cases where an edge would not reduce the number of
     disjoint sets.  The removeEdge method needs to keep testing random edges
     as long as all the cells in the disjoint set are not in the same
     equivalence class.

   * This hangs due to a linear time step in the removeEdge method

   * This crashes during testing

   * Maze class / disjoint class leaks memory

Compiling testDisjoint: 
 
Compiling testMaze: 
 
Running testDisjoint:
===============================================================================
All tests passed (15 assertions in 1 test case)

 
Running testDisjoint:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
testMaze is a Catch v2.13.4 host application.
Run with -? for options

-------------------------------------------------------------------------------
Construct a Maze object and check the edge list
-------------------------------------------------------------------------------
../../Grading/testMaze.cpp:21
...............................................................................

../../Grading/testMaze.cpp:32: FAILED:
  REQUIRE( expectedEdges.find(p) != expectedEdges.end() )
with expansion:
  {?} != {?}

-------------------------------------------------------------------------------
Maze should allow removal of N-1 edges
-------------------------------------------------------------------------------
../../Grading/testMaze.cpp:35
...............................................................................

../../Grading/testMaze.cpp:35: FAILED:
due to a fatal error condition:
  SIGSEGV - Segmentation violation signal

===============================================================================
test cases: 3 | 1 passed | 2 failed
assertions: 6 | 4 passed | 2 failed

 
Memory checking:
==30526== Memcheck, a memory error detector
==30526== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==30526== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==30526== Command: testMaze
==30526== 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
testMaze is a Catch v2.13.4 host application.
Run with -? for options

-------------------------------------------------------------------------------
Construct a Maze object and check the edge list
-------------------------------------------------------------------------------
../../Grading/testMaze.cpp:21
...............................................................................

../../Grading/testMaze.cpp:32: FAILED:
  REQUIRE( expectedEdges.find(p) != expectedEdges.end() )
with expansion:
  {?} != {?}

==30526== Stack overflow in thread #1: can't grow stack to 0x1ffe801000
-------------------------------------------------------------------------------
Maze should allow removal of N-1 edges
-------------------------------------------------------------------------------
../../Grading/testMaze.cpp:35
...............................................................................

../../Grading/testMaze.cpp:35: FAILED:
due to a fatal error condition:
  SIGSEGV - Segmentation violation signal

===============================================================================
test cases: 3 | 1 passed | 2 failed
assertions: 6 | 4 passed | 2 failed

==30526== 
==30526== Process terminating with default action of signal 11 (SIGSEGV)
==30526==    at 0x57BBF95: raise (raise.c:46)
==30526==    by 0x12314F: Catch::FatalConditionHandler::handleSignal(int) (in /home/phinker/CSC315/Spring2021/Assignments/Weekly/DaleyRaymond/wa6/testMaze)
==30526==    by 0x57BC03F: ??? (in /lib/x86_64-linux-gnu/libc-2.27.so)
==30526==    by 0x1DCF16: Disjoint::Find(int) (in /home/phinker/CSC315/Spring2021/Assignments/Weekly/DaleyRaymond/wa6/testMaze)
==30526== 
==30526== HEAP SUMMARY:
==30526==     in use at exit: 14,457 bytes in 163 blocks
==30526==   total heap usage: 2,633 allocs, 2,470 frees, 432,284 bytes allocated
==30526== 
==30526== LEAK SUMMARY:
==30526==    definitely lost: 0 bytes in 0 blocks
==30526==    indirectly lost: 0 bytes in 0 blocks
==30526==      possibly lost: 0 bytes in 0 blocks
==30526==    still reachable: 14,457 bytes in 163 blocks
==30526==         suppressed: 0 bytes in 0 blocks
==30526== Reachable blocks (those to which a pointer was found) are not shown.
==30526== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==30526== 
==30526== For counts of detected and suppressed errors, rerun with: -v
==30526== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
 
Compiling timeMaze: 
Generate Large Maze, testing performance
